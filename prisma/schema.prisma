generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int            @id @default(autoincrement())
  email                  String         @unique
  name                   String
  password               String
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt
  templates              Template[]
  Form                   Form[]
  salesforceAccountId    String?
  salesforceContactId    String?
  isSyncedWithSalesforce Boolean        @default(false)
  likedTemplates         TemplateLike[]
}

model Template {
  id          Int            @id @default(autoincrement())
  title       String
  description String
  topic       String
  tags        Tags[]         @relation("TemplateTags")
  questions   Question[]
  createdAt   DateTime       @default(now())
  userId      Int
  user        User           @relation(fields: [userId], references: [id])
  Form        Form[]
  likes       TemplateLike[]
  likesCount  Int            @default(0)
}

model Question {
  id         Int       @id @default(autoincrement())
  templateId Int?
  title      String
  type       String
  options    Options[]
  required   Boolean
  template   Template? @relation(fields: [templateId], references: [id])
  Answer     Answer[]
}

model Options {
  id         Int       @id @default(autoincrement())
  value      String
  questionId Int?
  question   Question? @relation(fields: [questionId], references: [id])
  Answer     Answer[]
}

model Tags {
  id        Int        @id @default(autoincrement())
  label     String
  templates Template[] @relation("TemplateTags")
}

model Form {
  id         Int      @id @default(autoincrement())
  templateId Int
  userId     Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  template   Template @relation(fields: [templateId], references: [id])
  user       User?    @relation(fields: [userId], references: [id])
  answers    Answer[]
}

model Answer {
  id         Int      @id @default(autoincrement())
  formId     Int
  questionId Int
  textValue  String?
  intValue   Int?
  optionId   Int?
  form       Form     @relation(fields: [formId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
  option     Options? @relation(fields: [optionId], references: [id])
}

model TemplateLike {
  userId     Int
  templateId Int
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@id([userId, templateId])
  @@index([templateId])
  @@index([userId])
}
